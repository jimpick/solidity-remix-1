{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "errorCode",
						"type": "int256"
					}
				],
				"name": "ActorError",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ActorNotFound",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyHasAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AmountEqualZero",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "ERC1967InvalidImplementation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC1967NonPayable",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailToCallActor",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FunctionDisabled",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "InvalidCodec",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidResponseLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "NotEnoughBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "UUPSUnauthorizedCallContext",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "slot",
						"type": "bytes32"
					}
				],
				"name": "UUPSUnsupportedProxiableUUID",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceBefore",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceAfter",
						"type": "uint256"
					}
				],
				"name": "AllowanceChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "client",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DatacapAllocated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "UPGRADE_INTERFACE_VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "clientAddress",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addVerifiedClient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "allowance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllocators",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "allocators",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "setAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Contract is upgradeable via UUPS by contract owner.",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AlreadyHasAllowance()": [
					{
						"details": "Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value"
					}
				],
				"AlreadyZero()": [
					{
						"details": "Thrown if trying to set allowance to 0 when it's already 0"
					}
				],
				"AmountEqualZero()": [
					{
						"details": "Thrown if trying to add 0 allowance or grant 0 datacap"
					}
				],
				"ERC1967InvalidImplementation(address)": [
					{
						"details": "The `implementation` of the proxy is invalid."
					}
				],
				"ERC1967NonPayable()": [
					{
						"details": "An upgrade function sees `msg.value > 0` that may be lost."
					}
				],
				"FailedCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"FunctionDisabled()": [
					{
						"details": "Thrown if trying to call disabled function"
					}
				],
				"InsufficientAllowance()": [
					{
						"details": "Thrown if caller doesn't have enough allowance for given action"
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"UUPSUnauthorizedCallContext()": [
					{
						"details": "The call is from an unauthorized context."
					}
				],
				"UUPSUnsupportedProxiableUUID(bytes32)": [
					{
						"details": "The storage `slot` is unsupported as a UUID."
					}
				]
			},
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"params": {
						"allocator": "Allocator whose allowance has changed",
						"allowanceAfter": "Allowance after the change",
						"allowanceBefore": "Allowance before the change"
					}
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"params": {
						"allocator": "Allocator who granted the datacap",
						"amount": "Amount of datacap",
						"client": "Client that received datacap (Filecoin address)"
					}
				},
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"Upgraded(address)": {
					"details": "Emitted when the implementation is upgraded."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"addAllowance(address,uint256)": {
					"details": "Emits AllowanceChanged eventReverts if not called by contract ownerReverts if trying to add 0 allowance",
					"params": {
						"allocator": "Allocator that will receive allowance",
						"amount": "Amount of allowance to add"
					}
				},
				"addVerifiedClient(bytes,uint256)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance",
					"params": {
						"amount": "Amount of datacap to grant",
						"clientAddress": "Filecoin address of the client"
					}
				},
				"allowance(address)": {
					"params": {
						"allocator": "Allocator to get allowance for"
					},
					"returns": {
						"allowance_": "Allocator's allowance"
					}
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"getAllocators()": {
					"returns": {
						"allocators": "List of allocators with non-zero allowance"
					}
				},
				"initialize(address)": {
					"params": {
						"initialOwner": "Initial contract owner"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setAllowance(address,uint256)": {
					"details": "Emits AllowanceChanged eventReverts if not called by contract ownerReverts if setting to 0 when allocator already has 0 allowance",
					"params": {
						"allocator": "Allocator",
						"amount": "Amount of allowance to set"
					}
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
				},
				"upgradeToAndCall(address,bytes)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				}
			},
			"title": "Allocator",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"ActorError(int256)": [
					{
						"notice": "the called actor returned an error as part of its expected behaviour"
					}
				],
				"ActorNotFound()": [
					{
						"notice": "the actor is not found"
					}
				],
				"FailToCallActor()": [
					{
						"notice": "an error happened trying to call the actor"
					}
				],
				"InvalidCodec(uint64)": [
					{
						"notice": "the codec received is not valid"
					}
				],
				"InvalidResponseLength()": [
					{
						"notice": "the response received is not correct. In some case no response is expected and we received one, or a response was indeed expected and we received none."
					}
				],
				"NotEnoughBalance(uint256,uint256)": [
					{
						"notice": "the smart contract has no enough balance to transfer"
					}
				]
			},
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"notice": "Emitted when allocator's allowance is changed by manager"
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"notice": "Emitted when datacap is granted to a client"
				}
			},
			"kind": "user",
			"methods": {
				"addAllowance(address,uint256)": {
					"notice": "Add allowance to Allocator"
				},
				"addVerifiedClient(bytes,uint256)": {
					"notice": "Grant allowance to a client."
				},
				"allowance(address)": {
					"notice": "Get allowance of an allocator"
				},
				"getAllocators()": {
					"notice": "Get all allocators with non-zero allowance"
				},
				"initialize(address)": {
					"notice": "Contract initializator. Should be called during deployment."
				},
				"setAllowance(address,uint256)": {
					"notice": "Set allowance of an Allocator. Can be used to remove allowance."
				}
			},
			"notice": "This contract functions as a middle-man for Allocators. It's made a Verifier (a.k.a. Notary) on Filecoin chain and granted DataCap that can then be granted to Clients. Granting to clients can be done by Allocators that get allowance on the contract, assigned by contract owner.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/7_Allocator.sol": "Allocator"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@ensdomains/buffer/contracts/Buffer.sol": {
			"keccak256": "0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c",
			"license": "BSD-2-Clause",
			"urls": [
				"bzz-raw://78a722152d40d778a97595e5224fac1d138f4e659dcb1a926148909ef4c4bdca",
				"dweb:/ipfs/QmRxScF53x5ywsChLNpMUCdg2TSoCWTfo8G65Mo3sGY55b"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
			"keccak256": "0xe9570c90b688339474e80090b0cdf0b2c85c25aa28cc6044d489dda9efc2c716",
			"license": "MIT",
			"urls": [
				"bzz-raw://f358f7eab8cc53b784d5ff3f82073124d797638aee71487beca3543414a46a23",
				"dweb:/ipfs/QmWy153MjdHfUbqtCKELubAmMavjBEeRByTDv9MMoUVZN4"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
				"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bc189f63b639ee173dd7b6fecc39baf7113bf161776aea22b34c57fdd1872ec",
				"dweb:/ipfs/QmZAf2VtjDLRULqjJkde6LNsxAg12tUqpPqgUQQZbAjgtZ"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC1967.sol": {
			"keccak256": "0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486",
			"license": "MIT",
			"urls": [
				"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d",
				"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
			"keccak256": "0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d3b36282ab029b46bd082619a308a2ea11c309967b9425b7b7a6eb0b0c1c3196",
				"dweb:/ipfs/QmP2YVfDB2FoREax3vJu7QhDnyYRMw52WPrCD4vdT2kuDA"
			]
		},
		"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
			"keccak256": "0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898",
			"license": "MIT",
			"urls": [
				"bzz-raw://271f914261a19d87117a777e0924ada545c16191ef9b00cc40b0134fc14ebc70",
				"dweb:/ipfs/QmdvVNWHGHQrGGPonZJs5NuzTevTjZRM2zayKrDJf7WBA2"
			]
		},
		"@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa",
				"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c",
			"license": "MIT",
			"urls": [
				"bzz-raw://cb2f27cd3952aa667e198fba0d9b7bcec52fbb12c16f013c25fe6fb52b29cc0e",
				"dweb:/ipfs/QmeuohBFoeyDPZA9JNCTEDz3VBfBD4EABWuWXVhHAuEpKR"
			]
		},
		"@openzeppelin/contracts/utils/Arrays.sol": {
			"keccak256": "0x55a4fdb408e3db950b48f4a6131e538980be8c5f48ee59829d92d66477140cd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e1ad251e692822ce1494135a4ecb5b97c19b90aa82418fd2959ce32017953fd",
				"dweb:/ipfs/QmT6N7mf6heZYhY2BAQ5kwZp9o3SXzGVdkMqUszx67WRDN"
			]
		},
		"@openzeppelin/contracts/utils/Comparators.sol": {
			"keccak256": "0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58",
			"license": "MIT",
			"urls": [
				"bzz-raw://49ba706f1bc476d68fe6c1fad75517acea4e9e275be0989b548e292eb3a3eacd",
				"dweb:/ipfs/QmeBpvcdGWzWMKTQESUCEhHgnEQYYATVwPxLMxa6vMT7jC"
			]
		},
		"@openzeppelin/contracts/utils/Errors.sol": {
			"keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
				"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/SlotDerivation.sol": {
			"keccak256": "0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26",
			"license": "MIT",
			"urls": [
				"bzz-raw://30192451f05ea5ddb0c18bd0f9003f098505836ba19c08a9c365adf829454da2",
				"dweb:/ipfs/QmfCuZSCTyCdFoSKn7MSaN6hZksnQn9ZhrZDAdRTCbwGu2"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
			"keccak256": "0x5d0c69ef32eae686acc22acfb1a54df9c91356e69adec593aa69eba83ae8f6f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7a9fca2cb3d802c4f8a2d0fda84ccc7f880264885801c7df08373501dd22282",
				"dweb:/ipfs/QmdtM2Loz9NzNTuQ3RXNQCPBjoPUJw35Ukpt1MSM9XH3cD"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xecd5f3c702f549fb88555e44e5f2415a4dfd6db09081aec7e98c26b6a3739c06",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed40e907a6d80458a0556a609d0d3991d718c20f9f1f21475e5ec739af523231",
				"dweb:/ipfs/QmejkwADsZRxkusNU94sswMJfpLrbq8RkJTbNccUEQpc7Y"
			]
		},
		"contracts/7_Allocator.sol": {
			"keccak256": "0xc93deaf931236fa50e8430881f16d8b90b1d356c5df34a986d29667c1d4d88d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://37fd24b83cede0f7a0b56cbc02ae002df4f581c55fe03deb1cea5ce9423067d0",
				"dweb:/ipfs/QmW1fE3EBrdbB4Lg4qYZMqq4newxCz52f8GdtRcYfhzzRL"
			]
		},
		"interfaces/IAllocator.sol": {
			"keccak256": "0xf1097367aa14640e8616e9de4cf8be37a538fb078d12e3b9d55b7038efaf7385",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://e654ba85ddadeb596f567775ae31a68fa69a712466f417eba0b9301debd957f3",
				"dweb:/ipfs/QmZ9r6mAVhz9icv5PpZ7BTnt6ES2ZgPKxKoNu3Dxh57hKz"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/Utils.sol": {
			"keccak256": "0x71268a34a8be6110c999f465587d72a3f9527dc4d7674bd1d6083eb18040ef76",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://99b9e1e24816990eeb7b4d200f252ec69de8f9bd19f2cb374bb2d06774df8bda",
				"dweb:/ipfs/QmWNrKdo44hNuDh2mKt7H5pXqizVESNtvcMi7bdjQq2QWg"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/VerifRegAPI.sol": {
			"keccak256": "0x1af68ba52a04eba445cedc53e9f89451080b36358c4f50aa66a98dc6203a52a2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6f3113480106931575a97993345bbb3a3527ece5df0d669c3bfa8d8de3e52842",
				"dweb:/ipfs/QmYZZ4m22zKGqU7svhXxdtA7dKdamw4wPFrNkqP6fDck9E"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/AccountCbor.sol": {
			"keccak256": "0xbc15538954ef494595fa3916532574ba00805ce09d8679d6bcebf59b5dc069cc",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bc46b1dbb7760a7d9a100b0d44a95e4b0a3c68e7c22dda2c8ec9b0442080ed76",
				"dweb:/ipfs/QmWjdmiD96UsdYNvsSv1W97JLvWE6NRnkZLBB5GUecWxkE"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol": {
			"keccak256": "0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://d4b8aa06f6f6a241531393d43e4439dcf264542312f03b3b1be00a6448d45d5e",
				"dweb:/ipfs/QmVarAEVBJgLnGqMEZ6XDRokXKR8vWpS3R6fz7QNCMVPT2"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol": {
			"keccak256": "0x092be34452eead511a33e8d5c0a0878bf53ac5747ada8788099a81bdf888eccf",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a8adec0719d5ae1d5252169a9987023fae1d07e50f40d1f91c04020d6e0cb783",
				"dweb:/ipfs/QmWthjuXuaby8XYY5ujLdX9m1Npbd8EdNTjsi6fwqEXeZB"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol": {
			"keccak256": "0x9c73c2969df5325f1f86c401b05b8983e633e8bd21c1c72b2b9039a731174098",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://832c4992387994d42d5b8470cc67eddfe7220719970cc6fe0b17cb2ad0a88716",
				"dweb:/ipfs/QmYW4WknHH4Rf6Wah3LKT1afcZuPkSBK4fegjpwdT5sRaL"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/VerifRegCbor.sol": {
			"keccak256": "0x70597cf1bd8788651484b6da522a6ff5ae84ccfd6240277ef151c4dbfd66ed18",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a40c3b0817daad0c6d05917e7a4695aae58daf63978f5791c3ae89fed99811c5",
				"dweb:/ipfs/QmTSKbsJaP641UEYc3CS4LK73QTgi6XEXhy4e6MbtRSVPP"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/AccountTypes.sol": {
			"keccak256": "0x87555cec6962a4b6bd761a2390a24d66e01119d5b761048a27d1df0673a71263",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f42937dc061ce4f2995ad2357a8ebcd030e5744b95665cf24313ed86e1767f4b",
				"dweb:/ipfs/QmWbN2gozKsNXGYM4yMivTRaicPzjVALUHn2GDcRN7FiHE"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol": {
			"keccak256": "0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f7346f62e3317f519791256e9ecd70c44b3ed48404d8a15aa28b3490b11adabb",
				"dweb:/ipfs/QmNQLSdzyHLDN9a76XANJzkGVVdyYwYzZSRRiwv6CqwZRr"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/DataCapTypes.sol": {
			"keccak256": "0x3cc3bf016e52161336f6e163e1f985ac1b535b8a75bf771a3feb5949ff06ee97",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a895f59f0dbdc048ec688e140853389f53e05a5926ea80c3e7c6b320999b3798",
				"dweb:/ipfs/QmRsvLK3u71yhZExkMWTKH8y2LCx8aiyBtSpaPmGeZ3i9p"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/VerifRegTypes.sol": {
			"keccak256": "0xd09f86b3a9a466f4206efa62a51d10659ab540daa26b173ae0ccbe08d6176811",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://30ac492a10ca9028018c4204bad44c06de7b08d2ef2bdc2999a1b5d9529921d9",
				"dweb:/ipfs/QmdvAJhDkzE74mE3WTN23uRKzfCRjXKyLL62pJ4vSofbaZ"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Actor.sol": {
			"keccak256": "0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c9c42c1ca5c39551cc0c0032e3b3d602fcaed66bc67c21b2b46a770b6c7009aa",
				"dweb:/ipfs/QmWiqHWieDPscnC21LjhgMrjE5UmzrRfEAVfXPNRTuZStw"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol": {
			"keccak256": "0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1d6a4b4341714cbc99db90831f1a6fa05654c62702badec60701cff701355f9a",
				"dweb:/ipfs/QmbQfXXmvhBhybcS1kd6B7UaXWTGg8R89xgzPycxeojWo6"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol": {
			"keccak256": "0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://4f25613594b914416148b2b337e913cb1a4483f165516a420a8cedd57dd2d422",
				"dweb:/ipfs/QmeLmdWrLJtUWKphWq37r8bRJUjiHG7gqktPARVXBvpAPe"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Leb128.sol": {
			"keccak256": "0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a2f4fc0bb4d1ff3276c12c88445402e2a018b4ba33b544feb93c5297e317187f",
				"dweb:/ipfs/QmTZLonpTSEQAdZtfmXRt83n6RQMyhFJzppZFCCdXcqwjw"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Misc.sol": {
			"keccak256": "0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1b116a3f7af53a2b35316405af74e296550dcfe04798b6c3954e2becda1027c1",
				"dweb:/ipfs/QmPia4SFULn4EXcE8fiMBcKtf8TX7YfbJRZxywu31e6uQw"
			]
		},
		"solidity-cborutils/contracts/CBOR.sol": {
			"keccak256": "0xe03d8889bf66e7a30e8010b022b6c86ad0f8c19764cc6c7f50b6bb4ad860cb9b",
			"license": "MIT",
			"urls": [
				"bzz-raw://bbcfc16dda4f5785938acce3f6733a2a27fbcc7451da05e46e5493907c1bb790",
				"dweb:/ipfs/QmTk1okPxoUykGuXPH3zD1LB57FwPuGbgYmViXXJtuYMUQ"
			]
		}
	},
	"version": 1
}