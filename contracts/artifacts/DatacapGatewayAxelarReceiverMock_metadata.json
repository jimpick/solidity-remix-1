{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "axelarGateway",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotApprovedByGateway",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "commandId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_from",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_clientFilecoinAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "Executed",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "amount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "clientFilecoinAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "commandId",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "sourceChain",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "sourceAddress",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "payload",
						"type": "bytes"
					}
				],
				"name": "execute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gateway",
				"outputs": [
					{
						"internalType": "contract IAxelarGateway",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sourceAddress",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sourceChain",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidAddress()": [
					{
						"details": "Thrown when a function is called with an invalid address."
					}
				],
				"NotApprovedByGateway()": [
					{
						"details": "Thrown when the call is not approved by the Axelar Gateway."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"execute(bytes32,string,string,bytes)": {
					"details": "This function ensures the call is approved by Axelar Gateway before execution. It uses a hash of the payload for validation and internally calls _execute for the actual command execution. Reverts if the validation fails.",
					"params": {
						"commandId": "The unique identifier of the cross-chain message being executed.",
						"payload": "The payload of the message payload.",
						"sourceAddress": "The address on the source chain that sent the message.",
						"sourceChain": "The name of the source chain from which the message originated."
					}
				},
				"gateway()": {
					"returns": {
						"_0": "The Axelar Gateway instance."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"execute(bytes32,string,string,bytes)": {
					"notice": "Executes the cross-chain command after validating it with the Axelar Gateway."
				},
				"gateway()": {
					"notice": "Returns the address of the AxelarGateway contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/18_DatacapGatewayAxelarReceiverMock.sol": "DatacapGatewayAxelarReceiverMock"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@axelar-network/axelar-gmp-sdk-solidity/contracts/executable/AxelarExecutable.sol": {
			"keccak256": "0x89078799d3ff3501cb859e3b87c9ac9541dd54bcdeb194b230324a2d74f6a74a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7e24a3b23e54b4fa45e2184da956a04a76b68dbc27b5706f465d8989ecb7109",
				"dweb:/ipfs/QmeFzVaUCYWgHAt9sCF62cUkGpvFfchH3riu7ZQCd5f8RP"
			]
		},
		"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol": {
			"keccak256": "0xc62de7533d4891bfd5bd8792e6638cb1d3ff4389dee2ce1f1dc8de235a057daa",
			"license": "MIT",
			"urls": [
				"bzz-raw://f934a6afcebde328dbf271af65a24370618f173c65f705739fb16e7f99195c15",
				"dweb:/ipfs/QmZ61TPX1wPk3UDhpGxktTdYvgei3kBG1iCMYLt99ANwhN"
			]
		},
		"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol": {
			"keccak256": "0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e",
			"license": "MIT",
			"urls": [
				"bzz-raw://1519882aed7b6de2ee1e316e5188d2bda1e305fc18a96b3895831f49dc9f90b0",
				"dweb:/ipfs/QmYTLwLGwmDkyX6GSE6PU93TkWP5mFz8qhmFyBrWfj6gaB"
			]
		},
		"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IERC20.sol": {
			"keccak256": "0xb77ad755f4eade679279d5ca12b6926595e41e17387e143530f4fb57672d58d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://b0d01d0810d12dba98839b084440ab9b52e04d94e9431a6ffadabb1651d0f100",
				"dweb:/ipfs/Qme9KLMtbmNvsAj2giGTzNFKAymkMJq88Ef445pLiawKWa"
			]
		},
		"contracts/18_DatacapGatewayAxelarReceiverMock.sol": {
			"keccak256": "0x2f404c95fbd0b31235d12249f40faa85939dabaf287295160381a47ef3ce1847",
			"license": "MIT",
			"urls": [
				"bzz-raw://6fa6e072654a2149d533600c47ea5553f428741777e5060ef1c5e57dd7100a1d",
				"dweb:/ipfs/QmUKre9WMs9MBkQvwYJ6DzDpc8VKxKwC5FhSpQJhpQHvaS"
			]
		}
	},
	"version": 1
}