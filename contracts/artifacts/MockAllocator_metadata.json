{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_mockDatacapAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AlreadyHasAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AmountEqualZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailToCallActor",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FunctionDisabled",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidAddress",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceBefore",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceAfter",
						"type": "uint256"
					}
				],
				"name": "AllowanceChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "client",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DatacapAllocated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "clientAddress",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addVerifiedClient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "clientAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addVerifiedClientMock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "allowance_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "actorID",
						"type": "uint64"
					}
				],
				"name": "getAddrBytesFromActorID",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllocators",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "allocators",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "actorID",
						"type": "uint64"
					}
				],
				"name": "getEthAddrFromActorID",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "clientAddress",
						"type": "bytes"
					}
				],
				"name": "getEthAddrFromBytes",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mockDatacap",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "setAllowance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Contract is upgradeable via UUPS by contract owner.",
			"errors": {
				"AlreadyHasAllowance()": [
					{
						"details": "Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value"
					}
				],
				"AlreadyZero()": [
					{
						"details": "Thrown if trying to set allowance to 0 when it's already 0"
					}
				],
				"AmountEqualZero()": [
					{
						"details": "Thrown if trying to add 0 allowance or grant 0 datacap"
					}
				],
				"FunctionDisabled()": [
					{
						"details": "Thrown if trying to call disabled function"
					}
				],
				"InsufficientAllowance()": [
					{
						"details": "Thrown if caller doesn't have enough allowance for given action"
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"params": {
						"allocator": "Allocator whose allowance has changed",
						"allowanceAfter": "Allowance after the change",
						"allowanceBefore": "Allowance before the change"
					}
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"params": {
						"allocator": "Allocator who granted the datacap",
						"amount": "Amount of datacap",
						"client": "Client that received datacap (Filecoin address)"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addAllowance(address,uint256)": {
					"details": "Emits AllowanceChanged eventReverts if not called by contract ownerReverts if trying to add 0 allowance",
					"params": {
						"allocator": "Allocator that will receive allowance",
						"amount": "Amount of allowance to add"
					}
				},
				"addVerifiedClient(bytes,uint256)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance",
					"params": {
						"amount": "Amount of datacap to grant",
						"clientAddress": "Filecoin address of the client"
					}
				},
				"addVerifiedClientMock(address,uint256)": {
					"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
					"details": "Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance",
					"params": {
						"amount": "Amount of datacap to grant",
						"clientAddress": "Filecoin address of the client"
					}
				},
				"allowance(address)": {
					"params": {
						"allocator": "Allocator to get allowance for"
					},
					"returns": {
						"allowance_": "Allocator's allowance"
					}
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"getAllocators()": {
					"returns": {
						"allocators": "List of allocators with non-zero allowance"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setAllowance(address,uint256)": {
					"details": "Emits AllowanceChanged eventReverts if not called by contract ownerReverts if setting to 0 when allocator already has 0 allowance",
					"params": {
						"allocator": "Allocator",
						"amount": "Amount of allowance to set"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "MockAllocator",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"FailToCallActor()": [
					{
						"notice": "an error happened trying to call the actor"
					}
				]
			},
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"notice": "Emitted when allocator's allowance is changed by manager"
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"notice": "Emitted when datacap is granted to a client"
				}
			},
			"kind": "user",
			"methods": {
				"addAllowance(address,uint256)": {
					"notice": "Add allowance to Allocator"
				},
				"addVerifiedClient(bytes,uint256)": {
					"notice": "Grant allowance to a client."
				},
				"addVerifiedClientMock(address,uint256)": {
					"notice": "Grant allowance to a client."
				},
				"allowance(address)": {
					"notice": "Get allowance of an allocator"
				},
				"getAllocators()": {
					"notice": "Get all allocators with non-zero allowance"
				},
				"setAllowance(address,uint256)": {
					"notice": "Set allowance of an Allocator. Can be used to remove allowance."
				}
			},
			"notice": "This contract functions as a middle-man for Allocators. It's made a Verifier (a.k.a. Notary) on Filecoin chain and granted DataCap that can then be granted to Clients. Granting to clients can be done by Allocators that get allowance on the contract, assigned by contract owner.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/11_MockAllocator.sol": "MockAllocator"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@ensdomains/buffer/contracts/Buffer.sol": {
			"keccak256": "0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c",
			"license": "BSD-2-Clause",
			"urls": [
				"bzz-raw://78a722152d40d778a97595e5224fac1d138f4e659dcb1a926148909ef4c4bdca",
				"dweb:/ipfs/QmRxScF53x5ywsChLNpMUCdg2TSoCWTfo8G65Mo3sGY55b"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/utils/Arrays.sol": {
			"keccak256": "0x55a4fdb408e3db950b48f4a6131e538980be8c5f48ee59829d92d66477140cd6",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e1ad251e692822ce1494135a4ecb5b97c19b90aa82418fd2959ce32017953fd",
				"dweb:/ipfs/QmT6N7mf6heZYhY2BAQ5kwZp9o3SXzGVdkMqUszx67WRDN"
			]
		},
		"@openzeppelin/contracts/utils/Comparators.sol": {
			"keccak256": "0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58",
			"license": "MIT",
			"urls": [
				"bzz-raw://49ba706f1bc476d68fe6c1fad75517acea4e9e275be0989b548e292eb3a3eacd",
				"dweb:/ipfs/QmeBpvcdGWzWMKTQESUCEhHgnEQYYATVwPxLMxa6vMT7jC"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/SlotDerivation.sol": {
			"keccak256": "0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26",
			"license": "MIT",
			"urls": [
				"bzz-raw://30192451f05ea5ddb0c18bd0f9003f098505836ba19c08a9c365adf829454da2",
				"dweb:/ipfs/QmfCuZSCTyCdFoSKn7MSaN6hZksnQn9ZhrZDAdRTCbwGu2"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
			"keccak256": "0x5d0c69ef32eae686acc22acfb1a54df9c91356e69adec593aa69eba83ae8f6f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7a9fca2cb3d802c4f8a2d0fda84ccc7f880264885801c7df08373501dd22282",
				"dweb:/ipfs/QmdtM2Loz9NzNTuQ3RXNQCPBjoPUJw35Ukpt1MSM9XH3cD"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xecd5f3c702f549fb88555e44e5f2415a4dfd6db09081aec7e98c26b6a3739c06",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed40e907a6d80458a0556a609d0d3991d718c20f9f1f21475e5ec739af523231",
				"dweb:/ipfs/QmejkwADsZRxkusNU94sswMJfpLrbq8RkJTbNccUEQpc7Y"
			]
		},
		"contracts/11_MockAllocator.sol": {
			"keccak256": "0x1c1bbb3b3b031e91184f5a78a538487aedfc3ac29566a49937d1c46ee14b9d55",
			"license": "MIT",
			"urls": [
				"bzz-raw://5692ce84a2a159b0b6f0640104d27c3f7f8026d41bda6f3622c7de4a71cdbc92",
				"dweb:/ipfs/QmQLDpk8gYBZq7PBu18AKUoQzexq3PYxEiS6hU8it1doUe"
			]
		},
		"interfaces/IMockAllocator.sol": {
			"keccak256": "0xd800b2cdec7fe10a6f748f54244e2c808213848917985229c83f125bf525f5bc",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://bf500e29b9e2d22869bba2c732901027873112f3796a33db35a940e2598cb8f2",
				"dweb:/ipfs/QmRNRnb3pfj1co4VWA2C8Ctop6G76XfqmhF4WFP2LaB6ko"
			]
		},
		"lib/filecoin-project-filecoin-solidity/contracts/v0.8/utils/FilAddressIdConverter.sol": {
			"keccak256": "0xd38664dae8fb6381d612e7787b6f7ace183b985927df5e45b7f119a049f2c1b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://eeaa8fab7052b4c43de60fdd4e0283f437bde5d4658d92105475e479c6359198",
				"dweb:/ipfs/QmQxoKofbZhJBRrBPAFKpXD9DbrenA4g3QGb2k7452MjRg"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/PrecompilesAPI.sol": {
			"keccak256": "0xaf2d09961a638c9287b6e68b242670e3ce9b2d2f58e56e36d1f67200905e5b34",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://387e62c233a1ef2e21b4f13bed20803ce5a2eb1de57853dc58160d19ff25c77d",
				"dweb:/ipfs/QmNZTQ2ehCd5so7aSUbQuLm5NcB3diYWc1tEyprGA3Cqa3"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/Utils.sol": {
			"keccak256": "0x71268a34a8be6110c999f465587d72a3f9527dc4d7674bd1d6083eb18040ef76",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://99b9e1e24816990eeb7b4d200f252ec69de8f9bd19f2cb374bb2d06774df8bda",
				"dweb:/ipfs/QmWNrKdo44hNuDh2mKt7H5pXqizVESNtvcMi7bdjQq2QWg"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/VerifRegAPI.sol": {
			"keccak256": "0x1af68ba52a04eba445cedc53e9f89451080b36358c4f50aa66a98dc6203a52a2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://6f3113480106931575a97993345bbb3a3527ece5df0d669c3bfa8d8de3e52842",
				"dweb:/ipfs/QmYZZ4m22zKGqU7svhXxdtA7dKdamw4wPFrNkqP6fDck9E"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/AccountCbor.sol": {
			"keccak256": "0xbc15538954ef494595fa3916532574ba00805ce09d8679d6bcebf59b5dc069cc",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://bc46b1dbb7760a7d9a100b0d44a95e4b0a3c68e7c22dda2c8ec9b0442080ed76",
				"dweb:/ipfs/QmWjdmiD96UsdYNvsSv1W97JLvWE6NRnkZLBB5GUecWxkE"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/BigIntCbor.sol": {
			"keccak256": "0xbe9eb7f33f943e12a2ca6d8a02178c30cef91f8c9db1c1b50f88a77e31784ac4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://d4b8aa06f6f6a241531393d43e4439dcf264542312f03b3b1be00a6448d45d5e",
				"dweb:/ipfs/QmVarAEVBJgLnGqMEZ6XDRokXKR8vWpS3R6fz7QNCMVPT2"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/BytesCbor.sol": {
			"keccak256": "0x092be34452eead511a33e8d5c0a0878bf53ac5747ada8788099a81bdf888eccf",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a8adec0719d5ae1d5252169a9987023fae1d07e50f40d1f91c04020d6e0cb783",
				"dweb:/ipfs/QmWthjuXuaby8XYY5ujLdX9m1Npbd8EdNTjsi6fwqEXeZB"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/FilecoinCbor.sol": {
			"keccak256": "0x9c73c2969df5325f1f86c401b05b8983e633e8bd21c1c72b2b9039a731174098",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://832c4992387994d42d5b8470cc67eddfe7220719970cc6fe0b17cb2ad0a88716",
				"dweb:/ipfs/QmYW4WknHH4Rf6Wah3LKT1afcZuPkSBK4fegjpwdT5sRaL"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/cbor/VerifRegCbor.sol": {
			"keccak256": "0x70597cf1bd8788651484b6da522a6ff5ae84ccfd6240277ef151c4dbfd66ed18",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a40c3b0817daad0c6d05917e7a4695aae58daf63978f5791c3ae89fed99811c5",
				"dweb:/ipfs/QmTSKbsJaP641UEYc3CS4LK73QTgi6XEXhy4e6MbtRSVPP"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/AccountTypes.sol": {
			"keccak256": "0x87555cec6962a4b6bd761a2390a24d66e01119d5b761048a27d1df0673a71263",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f42937dc061ce4f2995ad2357a8ebcd030e5744b95665cf24313ed86e1767f4b",
				"dweb:/ipfs/QmWbN2gozKsNXGYM4yMivTRaicPzjVALUHn2GDcRN7FiHE"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/CommonTypes.sol": {
			"keccak256": "0x1819b8e82cf53f0fadc446d064a380979888b97a0004f1e70c9fa1a6f4f13ed9",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f7346f62e3317f519791256e9ecd70c44b3ed48404d8a15aa28b3490b11adabb",
				"dweb:/ipfs/QmNQLSdzyHLDN9a76XANJzkGVVdyYwYzZSRRiwv6CqwZRr"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/DataCapTypes.sol": {
			"keccak256": "0x3cc3bf016e52161336f6e163e1f985ac1b535b8a75bf771a3feb5949ff06ee97",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a895f59f0dbdc048ec688e140853389f53e05a5926ea80c3e7c6b320999b3798",
				"dweb:/ipfs/QmRsvLK3u71yhZExkMWTKH8y2LCx8aiyBtSpaPmGeZ3i9p"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/types/VerifRegTypes.sol": {
			"keccak256": "0xd09f86b3a9a466f4206efa62a51d10659ab540daa26b173ae0ccbe08d6176811",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://30ac492a10ca9028018c4204bad44c06de7b08d2ef2bdc2999a1b5d9529921d9",
				"dweb:/ipfs/QmdvAJhDkzE74mE3WTN23uRKzfCRjXKyLL62pJ4vSofbaZ"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Actor.sol": {
			"keccak256": "0xa4b9eb4d84491477a3c11336a431c4f3a0796977efb92779bd062f273824c67a",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c9c42c1ca5c39551cc0c0032e3b3d602fcaed66bc67c21b2b46a770b6c7009aa",
				"dweb:/ipfs/QmWiqHWieDPscnC21LjhgMrjE5UmzrRfEAVfXPNRTuZStw"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/CborDecode.sol": {
			"keccak256": "0x3babe3c71558c21f0bef9de09088c42b8b148d16d856f84a350b9c43b4da6018",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1d6a4b4341714cbc99db90831f1a6fa05654c62702badec60701cff701355f9a",
				"dweb:/ipfs/QmbQfXXmvhBhybcS1kd6B7UaXWTGg8R89xgzPycxeojWo6"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/FilAddresses.sol": {
			"keccak256": "0x3ca8652660af7a3ff1b894b7c8a875645999b561499e960198dfe330d39ce387",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://4f25613594b914416148b2b337e913cb1a4483f165516a420a8cedd57dd2d422",
				"dweb:/ipfs/QmeLmdWrLJtUWKphWq37r8bRJUjiHG7gqktPARVXBvpAPe"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Leb128.sol": {
			"keccak256": "0xe1f4d71cdc933b0c2ac8eb81d711bf63457ed8e79b748ca9f826d40a3b4f143b",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a2f4fc0bb4d1ff3276c12c88445402e2a018b4ba33b544feb93c5297e317187f",
				"dweb:/ipfs/QmTZLonpTSEQAdZtfmXRt83n6RQMyhFJzppZFCCdXcqwjw"
			]
		},
		"lib/filecoin-solidity/contracts/v0.8/utils/Misc.sol": {
			"keccak256": "0x97b02c3ab9cb11169b0b1a143b513017c6bf0f2cba2fc4f81a77345b5dfe96b4",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://1b116a3f7af53a2b35316405af74e296550dcfe04798b6c3954e2becda1027c1",
				"dweb:/ipfs/QmPia4SFULn4EXcE8fiMBcKtf8TX7YfbJRZxywu31e6uQw"
			]
		},
		"solidity-cborutils/contracts/CBOR.sol": {
			"keccak256": "0xe03d8889bf66e7a30e8010b022b6c86ad0f8c19764cc6c7f50b6bb4ad860cb9b",
			"license": "MIT",
			"urls": [
				"bzz-raw://bbcfc16dda4f5785938acce3f6733a2a27fbcc7451da05e46e5493907c1bb790",
				"dweb:/ipfs/QmTk1okPxoUykGuXPH3zD1LB57FwPuGbgYmViXXJtuYMUQ"
			]
		}
	},
	"version": 1
}