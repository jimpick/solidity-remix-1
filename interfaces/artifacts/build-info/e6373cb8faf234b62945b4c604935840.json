{
	"id": "e6373cb8faf234b62945b4c604935840",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"interfaces/IMockAllocator.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/**\n * @title Interface for Allocator contract\n * @notice Definition of core functions and events of the Allocator contract\n */\ninterface IMockAllocator {\n    /**\n     * @dev Thrown if caller doesn't have enough allowance for given action\n     */\n    error InsufficientAllowance();\n\n    /**\n     * @dev Thrown if trying to add 0 allowance or grant 0 datacap\n     */\n    error AmountEqualZero();\n\n    /**\n     * @dev Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value\n     */\n    error AlreadyHasAllowance();\n\n    /**\n     * @dev Thrown if trying to set allowance to 0 when it's already 0\n     */\n    error AlreadyZero();\n\n    /**\n     * @dev Thrown if trying to call disabled function\n     */\n    error FunctionDisabled();\n\n    /**\n     * @notice Emitted when allocator's allowance is changed by manager\n     * @param allocator Allocator whose allowance has changed\n     * @param allowanceBefore Allowance before the change\n     * @param allowanceAfter Allowance after the change\n     */\n    event AllowanceChanged(address indexed allocator, uint256 allowanceBefore, uint256 allowanceAfter);\n\n    /**\n     * @notice Emitted when datacap is granted to a client\n     * @param allocator Allocator who granted the datacap\n     * @param client Client that received datacap (Filecoin address)\n     * @param amount Amount of datacap\n     */\n    event DatacapAllocated(address indexed allocator, bytes indexed client, uint256 amount);\n\n    /**\n     * @notice Get all allocators with non-zero allowance\n     * @return allocators List of allocators with non-zero allowance\n     */\n    // function getAllocators() external view returns (address[] memory allocators);\n\n    /**\n     * @notice Get allowance of an allocator\n     * @param allocator Allocator to get allowance for\n     * @return allowance Allocator's allowance\n     */\n    // function allowance(address allocator) external view returns (uint256 allowance);\n\n    /**\n     * @notice Add allowance to Allocator\n     * @param allocator Allocator that will receive allowance\n     * @param amount Amount of allowance to add\n     * @dev Emits AllowanceChanged event\n     * @dev Reverts if not called by contract owner\n     * @dev Reverts if trying to add 0 allowance\n     */\n    // function addAllowance(address allocator, uint256 amount) external;\n\n    /**\n     * @notice Set allowance of an Allocator. Can be used to remove allowance.\n     * @param allocator Allocator\n     * @param amount Amount of allowance to set\n     * @dev Emits AllowanceChanged event\n     * @dev Reverts if not called by contract owner\n     * @dev Reverts if setting to 0 when allocator already has 0 allowance\n     */\n    // function setAllowance(address allocator, uint256 amount) external;\n\n    /**\n     * @notice Grant allowance to a client.\n     * @param clientAddress Filecoin address of the client\n     * @param amount Amount of datacap to grant\n     * @dev Emits DatacapAllocated event\n     * @dev Reverts with InsufficientAllowance if caller doesn't have sufficient allowance\n     */\n    function addVerifiedClient(bytes calldata clientAddress, uint256 amount) external;\n\n    function addVerifiedClientMock(address clientAddress, uint256 amount) external;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"interfaces/IMockAllocator.sol": {
				"IMockAllocator": {
					"abi": [
						{
							"inputs": [],
							"name": "AlreadyHasAllowance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "AlreadyZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "AmountEqualZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FunctionDisabled",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "allowanceBefore",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "allowanceAfter",
									"type": "uint256"
								}
							],
							"name": "AllowanceChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "allocator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "client",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "DatacapAllocated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "clientAddress",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "addVerifiedClient",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "clientAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "addVerifiedClientMock",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AlreadyHasAllowance()": [
								{
									"details": "Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value"
								}
							],
							"AlreadyZero()": [
								{
									"details": "Thrown if trying to set allowance to 0 when it's already 0"
								}
							],
							"AmountEqualZero()": [
								{
									"details": "Thrown if trying to add 0 allowance or grant 0 datacap"
								}
							],
							"FunctionDisabled()": [
								{
									"details": "Thrown if trying to call disabled function"
								}
							],
							"InsufficientAllowance()": [
								{
									"details": "Thrown if caller doesn't have enough allowance for given action"
								}
							]
						},
						"events": {
							"AllowanceChanged(address,uint256,uint256)": {
								"params": {
									"allocator": "Allocator whose allowance has changed",
									"allowanceAfter": "Allowance after the change",
									"allowanceBefore": "Allowance before the change"
								}
							},
							"DatacapAllocated(address,bytes,uint256)": {
								"params": {
									"allocator": "Allocator who granted the datacap",
									"amount": "Amount of datacap",
									"client": "Client that received datacap (Filecoin address)"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addVerifiedClient(bytes,uint256)": {
								"details": "Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance",
								"params": {
									"amount": "Amount of datacap to grant",
									"clientAddress": "Filecoin address of the client"
								}
							}
						},
						"title": "Interface for Allocator contract",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addVerifiedClient(bytes,uint256)": "930fc006",
							"addVerifiedClientMock(address,uint256)": "63d67dff"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyHasAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountEqualZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowanceBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowanceAfter\",\"type\":\"uint256\"}],\"name\":\"AllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"client\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DatacapAllocated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"clientAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVerifiedClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVerifiedClientMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyHasAllowance()\":[{\"details\":\"Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value\"}],\"AlreadyZero()\":[{\"details\":\"Thrown if trying to set allowance to 0 when it's already 0\"}],\"AmountEqualZero()\":[{\"details\":\"Thrown if trying to add 0 allowance or grant 0 datacap\"}],\"FunctionDisabled()\":[{\"details\":\"Thrown if trying to call disabled function\"}],\"InsufficientAllowance()\":[{\"details\":\"Thrown if caller doesn't have enough allowance for given action\"}]},\"events\":{\"AllowanceChanged(address,uint256,uint256)\":{\"params\":{\"allocator\":\"Allocator whose allowance has changed\",\"allowanceAfter\":\"Allowance after the change\",\"allowanceBefore\":\"Allowance before the change\"}},\"DatacapAllocated(address,bytes,uint256)\":{\"params\":{\"allocator\":\"Allocator who granted the datacap\",\"amount\":\"Amount of datacap\",\"client\":\"Client that received datacap (Filecoin address)\"}}},\"kind\":\"dev\",\"methods\":{\"addVerifiedClient(bytes,uint256)\":{\"details\":\"Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance\",\"params\":{\"amount\":\"Amount of datacap to grant\",\"clientAddress\":\"Filecoin address of the client\"}}},\"title\":\"Interface for Allocator contract\",\"version\":1},\"userdoc\":{\"events\":{\"AllowanceChanged(address,uint256,uint256)\":{\"notice\":\"Emitted when allocator's allowance is changed by manager\"},\"DatacapAllocated(address,bytes,uint256)\":{\"notice\":\"Emitted when datacap is granted to a client\"}},\"kind\":\"user\",\"methods\":{\"addVerifiedClient(bytes,uint256)\":{\"notice\":\"Grant allowance to a client.\"}},\"notice\":\"Definition of core functions and events of the Allocator contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IMockAllocator.sol\":\"IMockAllocator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IMockAllocator.sol\":{\"keccak256\":\"0xd800b2cdec7fe10a6f748f54244e2c808213848917985229c83f125bf525f5bc\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bf500e29b9e2d22869bba2c732901027873112f3796a33db35a940e2598cb8f2\",\"dweb:/ipfs/QmRNRnb3pfj1co4VWA2C8Ctop6G76XfqmhF4WFP2LaB6ko\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AllowanceChanged(address,uint256,uint256)": {
								"notice": "Emitted when allocator's allowance is changed by manager"
							},
							"DatacapAllocated(address,bytes,uint256)": {
								"notice": "Emitted when datacap is granted to a client"
							}
						},
						"kind": "user",
						"methods": {
							"addVerifiedClient(bytes,uint256)": {
								"notice": "Grant allowance to a client."
							}
						},
						"notice": "Definition of core functions and events of the Allocator contract",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"interfaces/IMockAllocator.sol": {
				"ast": {
					"absolutePath": "interfaces/IMockAllocator.sol",
					"exportedSymbols": {
						"IMockAllocator": [
							51
						]
					},
					"id": 52,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IMockAllocator",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "64:127:0",
								"text": " @title Interface for Allocator contract\n @notice Definition of core functions and events of the Allocator contract"
							},
							"fullyImplemented": false,
							"id": 51,
							"linearizedBaseContracts": [
								51
							],
							"name": "IMockAllocator",
							"nameLocation": "202:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "223:87:0",
										"text": " @dev Thrown if caller doesn't have enough allowance for given action"
									},
									"errorSelector": "13be252b",
									"id": 5,
									"name": "InsufficientAllowance",
									"nameLocation": "321:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "342:2:0"
									},
									"src": "315:30:0"
								},
								{
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "351:78:0",
										"text": " @dev Thrown if trying to add 0 allowance or grant 0 datacap"
									},
									"errorSelector": "b0da7f34",
									"id": 8,
									"name": "AmountEqualZero",
									"nameLocation": "440:15:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "455:2:0"
									},
									"src": "434:24:0"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "464:155:0",
										"text": " @dev Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value"
									},
									"errorSelector": "494d1493",
									"id": 11,
									"name": "AlreadyHasAllowance",
									"nameLocation": "630:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "649:2:0"
									},
									"src": "624:28:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "658:82:0",
										"text": " @dev Thrown if trying to set allowance to 0 when it's already 0"
									},
									"errorSelector": "5657d5eb",
									"id": 14,
									"name": "AlreadyZero",
									"nameLocation": "751:11:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "762:2:0"
									},
									"src": "745:20:0"
								},
								{
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "771:66:0",
										"text": " @dev Thrown if trying to call disabled function"
									},
									"errorSelector": "bf241488",
									"id": 17,
									"name": "FunctionDisabled",
									"nameLocation": "848:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:2:0"
									},
									"src": "842:25:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 18,
										"nodeType": "StructuredDocumentation",
										"src": "873:259:0",
										"text": " @notice Emitted when allocator's allowance is changed by manager\n @param allocator Allocator whose allowance has changed\n @param allowanceBefore Allowance before the change\n @param allowanceAfter Allowance after the change"
									},
									"eventSelector": "d30aeeeb3755c0784618bd3ff45998e5b4be082df174ed87c3a79f37e2fb56a6",
									"id": 26,
									"name": "AllowanceChanged",
									"nameLocation": "1143:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "allocator",
												"nameLocation": "1176:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1160:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1160:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": false,
												"mutability": "mutable",
												"name": "allowanceBefore",
												"nameLocation": "1195:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1187:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": false,
												"mutability": "mutable",
												"name": "allowanceAfter",
												"nameLocation": "1220:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1212:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1212:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1159:76:0"
									},
									"src": "1137:99:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "1242:236:0",
										"text": " @notice Emitted when datacap is granted to a client\n @param allocator Allocator who granted the datacap\n @param client Client that received datacap (Filecoin address)\n @param amount Amount of datacap"
									},
									"eventSelector": "9b88bd178c90ce12441ff8588a493795e519ac037930d64fdb0d15de4fb53e37",
									"id": 35,
									"name": "DatacapAllocated",
									"nameLocation": "1489:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"indexed": true,
												"mutability": "mutable",
												"name": "allocator",
												"nameLocation": "1522:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1506:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1506:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"indexed": true,
												"mutability": "mutable",
												"name": "client",
												"nameLocation": "1547:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1533:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 30,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1533:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1563:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1555:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 32,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1555:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1505:65:0"
									},
									"src": "1483:88:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "2863:294:0",
										"text": " @notice Grant allowance to a client.\n @param clientAddress Filecoin address of the client\n @param amount Amount of datacap to grant\n @dev Emits DatacapAllocated event\n @dev Reverts with InsufficientAllowance if caller doesn't have sufficient allowance"
									},
									"functionSelector": "930fc006",
									"id": 43,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addVerifiedClient",
									"nameLocation": "3171:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "clientAddress",
												"nameLocation": "3204:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "3189:28:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 37,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3189:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3227:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 43,
												"src": "3219:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3219:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3188:46:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3243:0:0"
									},
									"scope": 51,
									"src": "3162:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "63d67dff",
									"id": 50,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addVerifiedClientMock",
									"nameLocation": "3259:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "clientAddress",
												"nameLocation": "3289:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "3281:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3281:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3312:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "3304:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3304:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3280:39:0"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3328:0:0"
									},
									"scope": 51,
									"src": "3250:79:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 52,
							"src": "192:3139:0",
							"usedErrors": [
								5,
								8,
								11,
								14,
								17
							],
							"usedEvents": [
								26,
								35
							]
						}
					],
					"src": "39:3293:0"
				},
				"id": 0
			}
		}
	}
}