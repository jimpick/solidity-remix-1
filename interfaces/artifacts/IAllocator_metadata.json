{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "AlreadyHasAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AmountEqualZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FunctionDisabled",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceBefore",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allowanceAfter",
						"type": "uint256"
					}
				],
				"name": "AllowanceChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "allocator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "client",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "DatacapAllocated",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "clientAddress",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addVerifiedClient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AlreadyHasAllowance()": [
					{
						"details": "Thrown if trying to set allowance bigger than 0 when user has allowance, set allowance to 0 first if you want to set specific value"
					}
				],
				"AlreadyZero()": [
					{
						"details": "Thrown if trying to set allowance to 0 when it's already 0"
					}
				],
				"AmountEqualZero()": [
					{
						"details": "Thrown if trying to add 0 allowance or grant 0 datacap"
					}
				],
				"FunctionDisabled()": [
					{
						"details": "Thrown if trying to call disabled function"
					}
				],
				"InsufficientAllowance()": [
					{
						"details": "Thrown if caller doesn't have enough allowance for given action"
					}
				]
			},
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"params": {
						"allocator": "Allocator whose allowance has changed",
						"allowanceAfter": "Allowance after the change",
						"allowanceBefore": "Allowance before the change"
					}
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"params": {
						"allocator": "Allocator who granted the datacap",
						"amount": "Amount of datacap",
						"client": "Client that received datacap (Filecoin address)"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addVerifiedClient(bytes,uint256)": {
					"details": "Emits DatacapAllocated eventReverts with InsufficientAllowance if caller doesn't have sufficient allowance",
					"params": {
						"amount": "Amount of datacap to grant",
						"clientAddress": "Filecoin address of the client"
					}
				}
			},
			"title": "Interface for Allocator contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"AllowanceChanged(address,uint256,uint256)": {
					"notice": "Emitted when allocator's allowance is changed by manager"
				},
				"DatacapAllocated(address,bytes,uint256)": {
					"notice": "Emitted when datacap is granted to a client"
				}
			},
			"kind": "user",
			"methods": {
				"addVerifiedClient(bytes,uint256)": {
					"notice": "Grant allowance to a client."
				}
			},
			"notice": "Definition of core functions and events of the Allocator contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"interfaces/IAllocator.sol": "IAllocator"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"interfaces/IAllocator.sol": {
			"keccak256": "0x653d8884fb1346a7883235bc93284be510a6900a1565d0eb4b73f72d6a75061c",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://5c60ff96e84f826b2431dc0e6c150e6b4b96dba4691fdb051cedd651e75195ee",
				"dweb:/ipfs/QmfJ2i3Hc9NXPo8WSzfQ82YT1GYHAiphd6hy1FGKGG49FX"
			]
		}
	},
	"version": 1
}